/**
 * CinePOS_BackEnd
 * CinePOS 後端API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CheckLockReq } from '../model/checkLockReq';
import { CheckLockRes } from '../model/checkLockRes';
import { CommonResFailed } from '../model/commonResFailed';
import { CommonResFailedFieldInvalid } from '../model/commonResFailedFieldInvalid';
import { CommonResFailedNoFound } from '../model/commonResFailedNoFound';
import { CommonResFailedWrongPassword } from '../model/commonResFailedWrongPassword';
import { CommonResSuccess } from '../model/commonResSuccess';
import { CommonUploadSuccess } from '../model/commonUploadSuccess';
import { CreateTicketReq } from '../model/createTicketReq';
import { CreateTicketRes } from '../model/createTicketRes';
import { InfoUpdateReq } from '../model/infoUpdateReq';
import { InfoUpdateRes } from '../model/infoUpdateRes';
import { LoginReq } from '../model/loginReq';
import { LoginRes } from '../model/loginRes';
import { PatchOrderReqInner } from '../model/patchOrderReqInner';
import { PatchSeatReqInner } from '../model/patchSeatReqInner';
import { PatchTicketReqInner } from '../model/patchTicketReqInner';
import { ScheduleListRes } from '../model/scheduleListRes';
import { SeatRes } from '../model/seatRes';
import { StaffOrderCreateReq } from '../model/staffOrderCreateReq';
import { StaffOrderCreateSuccess } from '../model/staffOrderCreateSuccess';
import { StaffOrderSearchSuccess } from '../model/staffOrderSearchSuccess';
import { TicketTypeReq } from '../model/ticketTypeReq';
import { TicketTypeRes } from '../model/ticketTypeRes';
import { UserProfileRes } from '../model/userProfileRes';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StaffService {

    protected basePath = 'https://api-t.cine-pos.com/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 登入請求
     * 
     * @param body 資料格式
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffLoginPost(body: LoginReq, observe?: 'body', reportProgress?: boolean): Observable<LoginRes>;
    public v1StaffLoginPost(body: LoginReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LoginRes>>;
    public v1StaffLoginPost(body: LoginReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LoginRes>>;
    public v1StaffLoginPost(body: LoginReq, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1StaffLoginPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<LoginRes>('post',`${this.basePath}/v1/staff/login`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 查詢訂單
     * 
     * @param orderId 訂單編號
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffOrderOrderIdGet(orderId: string, observe?: 'body', reportProgress?: boolean): Observable<StaffOrderSearchSuccess>;
    public v1StaffOrderOrderIdGet(orderId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StaffOrderSearchSuccess>>;
    public v1StaffOrderOrderIdGet(orderId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StaffOrderSearchSuccess>>;
    public v1StaffOrderOrderIdGet(orderId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling v1StaffOrderOrderIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StaffOrderSearchSuccess>('get',`${this.basePath}/v1/staff/order/${encodeURIComponent(String(orderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 更新訂單狀態
     * 
     * @param body 更新訂單狀態資料
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffOrderPatch(body: Array<PatchOrderReqInner>, observe?: 'body', reportProgress?: boolean): Observable<CommonResSuccess>;
    public v1StaffOrderPatch(body: Array<PatchOrderReqInner>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommonResSuccess>>;
    public v1StaffOrderPatch(body: Array<PatchOrderReqInner>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommonResSuccess>>;
    public v1StaffOrderPatch(body: Array<PatchOrderReqInner>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1StaffOrderPatch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CommonResSuccess>('patch',`${this.basePath}/v1/staff/order`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 結帳
     * 
     * @param body 結帳資料
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffOrderPost(body: StaffOrderCreateReq, observe?: 'body', reportProgress?: boolean): Observable<StaffOrderCreateSuccess>;
    public v1StaffOrderPost(body: StaffOrderCreateReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StaffOrderCreateSuccess>>;
    public v1StaffOrderPost(body: StaffOrderCreateReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StaffOrderCreateSuccess>>;
    public v1StaffOrderPost(body: StaffOrderCreateReq, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1StaffOrderPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<StaffOrderCreateSuccess>('post',`${this.basePath}/v1/staff/order`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 場次查詢
     * 
     * @param startDate 開始時間
     * @param endDate 結束時間
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffScheduleListGet(startDate: string, endDate: string, observe?: 'body', reportProgress?: boolean): Observable<ScheduleListRes>;
    public v1StaffScheduleListGet(startDate: string, endDate: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScheduleListRes>>;
    public v1StaffScheduleListGet(startDate: string, endDate: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScheduleListRes>>;
    public v1StaffScheduleListGet(startDate: string, endDate: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling v1StaffScheduleListGet.');
        }

        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling v1StaffScheduleListGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate);
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ScheduleListRes>('get',`${this.basePath}/v1/staff/schedule/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 檢查座位是否有被鎖住
     * 
     * @param body 資料格式
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffSeatCheckLockPost(body: CheckLockReq, observe?: 'body', reportProgress?: boolean): Observable<CheckLockRes>;
    public v1StaffSeatCheckLockPost(body: CheckLockReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckLockRes>>;
    public v1StaffSeatCheckLockPost(body: CheckLockReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckLockRes>>;
    public v1StaffSeatCheckLockPost(body: CheckLockReq, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1StaffSeatCheckLockPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CheckLockRes>('post',`${this.basePath}/v1/staff/seat/checkLock`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 更新座位狀態
     * 
     * @param body 更新訂單狀態資料
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffSeatPatch(body: Array<PatchSeatReqInner>, observe?: 'body', reportProgress?: boolean): Observable<CommonResSuccess>;
    public v1StaffSeatPatch(body: Array<PatchSeatReqInner>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommonResSuccess>>;
    public v1StaffSeatPatch(body: Array<PatchSeatReqInner>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommonResSuccess>>;
    public v1StaffSeatPatch(body: Array<PatchSeatReqInner>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1StaffSeatPatch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CommonResSuccess>('patch',`${this.basePath}/v1/staff/seat`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 取得場次座位表
     * 
     * @param scheduleId 場次ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffSeatScheduleIdGet(scheduleId: string, observe?: 'body', reportProgress?: boolean): Observable<SeatRes>;
    public v1StaffSeatScheduleIdGet(scheduleId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SeatRes>>;
    public v1StaffSeatScheduleIdGet(scheduleId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SeatRes>>;
    public v1StaffSeatScheduleIdGet(scheduleId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheduleId === null || scheduleId === undefined) {
            throw new Error('Required parameter scheduleId was null or undefined when calling v1StaffSeatScheduleIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SeatRes>('get',`${this.basePath}/v1/staff/seat/${encodeURIComponent(String(scheduleId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 更新電影票狀態
     * 
     * @param body 資料格式
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffTicketPatch(body: Array<PatchTicketReqInner>, observe?: 'body', reportProgress?: boolean): Observable<CommonResSuccess>;
    public v1StaffTicketPatch(body: Array<PatchTicketReqInner>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommonResSuccess>>;
    public v1StaffTicketPatch(body: Array<PatchTicketReqInner>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommonResSuccess>>;
    public v1StaffTicketPatch(body: Array<PatchTicketReqInner>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1StaffTicketPatch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CommonResSuccess>('patch',`${this.basePath}/v1/staff/ticket`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 新增電影票
     * 
     * @param body 資料格式
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffTicketPost(body: CreateTicketReq, observe?: 'body', reportProgress?: boolean): Observable<CreateTicketRes>;
    public v1StaffTicketPost(body: CreateTicketReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateTicketRes>>;
    public v1StaffTicketPost(body: CreateTicketReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateTicketRes>>;
    public v1StaffTicketPost(body: CreateTicketReq, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1StaffTicketPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CreateTicketRes>('post',`${this.basePath}/v1/staff/ticket`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 取得票種
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffTicketTypeGet(observe?: 'body', reportProgress?: boolean): Observable<TicketTypeRes>;
    public v1StaffTicketTypeGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TicketTypeRes>>;
    public v1StaffTicketTypeGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TicketTypeRes>>;
    public v1StaffTicketTypeGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TicketTypeRes>('get',`${this.basePath}/v1/staff/ticketType`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 新增票種
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffTicketTypePost(body: TicketTypeReq, observe?: 'body', reportProgress?: boolean): Observable<TicketTypeRes>;
    public v1StaffTicketTypePost(body: TicketTypeReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TicketTypeRes>>;
    public v1StaffTicketTypePost(body: TicketTypeReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TicketTypeRes>>;
    public v1StaffTicketTypePost(body: TicketTypeReq, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1StaffTicketTypePost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<TicketTypeRes>('post',`${this.basePath}/v1/staff/ticketType`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 修改員工姓名
     * 
     * @param body 資料格式
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffUserProfilePost(body: InfoUpdateReq, observe?: 'body', reportProgress?: boolean): Observable<InfoUpdateRes>;
    public v1StaffUserProfilePost(body: InfoUpdateReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InfoUpdateRes>>;
    public v1StaffUserProfilePost(body: InfoUpdateReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InfoUpdateRes>>;
    public v1StaffUserProfilePost(body: InfoUpdateReq, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1StaffUserProfilePost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<InfoUpdateRes>('post',`${this.basePath}/v1/staff/user/profile`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 取得櫃台人員資料
     * 
     * @param staffId 員編
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffUserProfileStaffIdGet(staffId: string, observe?: 'body', reportProgress?: boolean): Observable<UserProfileRes>;
    public v1StaffUserProfileStaffIdGet(staffId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProfileRes>>;
    public v1StaffUserProfileStaffIdGet(staffId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProfileRes>>;
    public v1StaffUserProfileStaffIdGet(staffId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (staffId === null || staffId === undefined) {
            throw new Error('Required parameter staffId was null or undefined when calling v1StaffUserProfileStaffIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UserProfileRes>('get',`${this.basePath}/v1/staff/user/profile/${encodeURIComponent(String(staffId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 上傳櫃台人員大頭貼
     * 
     * @param upload 
     * @param staffId 員編
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffUserStickerStaffIdPostForm(upload: Blob, staffId: string, observe?: 'body', reportProgress?: boolean): Observable<CommonUploadSuccess>;
    public v1StaffUserStickerStaffIdPostForm(upload: Blob, staffId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommonUploadSuccess>>;
    public v1StaffUserStickerStaffIdPostForm(upload: Blob, staffId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommonUploadSuccess>>;
    public v1StaffUserStickerStaffIdPostForm(upload: Blob, staffId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (upload === null || upload === undefined) {
            throw new Error('Required parameter upload was null or undefined when calling v1StaffUserStickerStaffIdPost.');
        }

        if (staffId === null || staffId === undefined) {
            throw new Error('Required parameter staffId was null or undefined when calling v1StaffUserStickerStaffIdPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (upload !== undefined) {
            formParams = formParams.append('upload', <any>upload) as any || formParams;
        }

        return this.httpClient.request<CommonUploadSuccess>('post',`${this.basePath}/v1/staff/user/sticker/${encodeURIComponent(String(staffId))}`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
